

import React, { useState } from 'react';
import { PentestOrder, PentestStatus } from '../types';
import { Button } from './ui/Button';
import { SelectInput, SelectOption } from './ui/SelectInput';
import { TextInput } from './ui/TextInput';
import { PENTEST_STATUS_OPTIONS } from '../constants';

interface AdminPentestOrdersViewProps {
  orders: PentestOrder[];
  onUpdateStatus: (orderId: string, newStatus: PentestStatus, adminNotes?: string) => void;
  onViewReport: (order: PentestOrder) => void;
  onNotifyCustomer?: (orderId: string) => void; // New prop for notifying customer
}

interface EditingOrderState {
  orderId: string;
  notes: string;
}

const StarIcon: React.FC<React.SVGProps<SVGSVGElement> & { filled: boolean }> = ({ filled, ...props }) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill={filled ? "currentColor" : "none"} stroke="currentColor" strokeWidth={1.5} {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.82.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.82-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
  </svg>
);


export const AdminPentestOrdersView: React.FC<AdminPentestOrdersViewProps> = ({ orders, onUpdateStatus, onViewReport, onNotifyCustomer }) => {
  const [editingNotesFor, setEditingNotesFor] = useState<EditingOrderState | null>(null);
  const [filterStatus, setFilterStatus] = useState<PentestStatus | ''>('');

  const handleStatusChange = (orderId: string, newStatus: PentestStatus) => {
    const order = orders.find(o => o.id === orderId);
    onUpdateStatus(orderId, newStatus, order?.adminNotes); 
  };

  const handleEditNotes = (order: PentestOrder) => {
    setEditingNotesFor({ orderId: order.id, notes: order.adminNotes || '' });
  };

  const handleSaveNotes = () => {
    if (editingNotesFor) {
      const order = orders.find(o => o.id === editingNotesFor.orderId);
      if (order) {
        onUpdateStatus(editingNotesFor.orderId, order.status, editingNotesFor.notes);
      }
      setEditingNotesFor(null);
    }
  };
  
  const statusFilterOptions: SelectOption[] = [
      { value: '', label: '// ALL STATUSES //' },
      ...PENTEST_STATUS_OPTIONS.map(s => ({ value: s.value, label: s.label }))
  ];

  const filteredOrders = filterStatus ? orders.filter(o => o.status === filterStatus) : orders;


  if (orders.length === 0) {
    return (
      <div className="text-center p-10">
        <h1 className="text-3xl font-bold text-neonGreen-DEFAULT mb-4">
            <span className="typing-text animate-typing">NO CYBER SERVICE ORDERS LOGGED</span><span className="typing-caret"></span>
        </h1>
        <p className="text-neutral-light">There are currently no active or past KI-driven Cyber Security Service orders in the system.</p>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-4 sm:p-6">
      <h1 className="text-2xl sm:text-3xl font-bold text-neonGreen-DEFAULT mb-6 text-center">
        <span className="typing-text animate-typing">ADMIN // MANAGE CYBER SERVICE ORDERS</span><span className="typing-caret"></span>
      </h1>

        <div className="mb-4 p-3 bg-neutral-dark border border-neutral-medium rounded-md">
            <SelectInput
                label="Filter by Status:"
                id="status-filter"
                options={statusFilterOptions}
                value={filterStatus}
                onChange={(val) => setFilterStatus(val as PentestStatus | '')}
            />
        </div>

      <div className="overflow-x-auto bg-neutral-darker p-1 border border-neutral-dark rounded-md shadow-lg">
        <table className="w-full min-w-max text-xs text-left">
          <thead className="border-b-2 border-neonGreen-dark">
            <tr>
              <th className="p-2 text-neonGreen-light">Order ID</th>
              <th className="p-2 text-neonGreen-light">Customer</th>
              <th className="p-2 text-neonGreen-light">Product</th>
              <th className="p-2 text-neonGreen-light">Target</th>
              <th className="p-2 text-neonGreen-light">Status</th>
              <th className="p-2 text-neonGreen-light">Admin Notes</th>
              <th className="p-2 text-neonGreen-light">Feedback</th>
              <th className="p-2 text-neonGreen-light text-center">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredOrders.sort((a,b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime()).map(order => (
              <tr key={order.id} className="border-b border-neutral-dark hover:bg-neutral-dark/70 transition-colors relative scanline-container scanline-overlay" 
                  style={{'--scanline-color': 'rgba(0, 255, 0, 0.02)'} as React.CSSProperties} // Example of how to pass color if CSS var was used
              >
                <td className="p-2 text-neutral-light whitespace-nowrap" title={order.id}>{order.id.substring(0,12)}...</td>
                <td className="p-2 text-neutral-light whitespace-nowrap">{order.username}</td>
                <td className="p-2 text-neutral-light whitespace-nowrap truncate max-w-[150px]" title={order.productName}>
                    {order.productName}
                    {order.productId === 'prod_svc_003' && <span className="ml-1 text-[0.65rem] bg-neonMagenta-dark text-neonMagenta-light px-1 py-0.5 rounded-sm font-mono align-middle">[CHIMERA]</span>}
                </td>
                <td className="p-2 text-neutral-light whitespace-nowrap truncate max-w-[150px]" title={order.targetInfo?.targetUrl || order.targetInfo?.targetIp}>
                  {order.targetInfo?.targetUrl || order.targetInfo?.targetIp || <span className="italic text-neutral-medium">N/A</span>}
                </td>
                <td className="p-2">
                  <SelectInput
                    id={`status-${order.id}`}
                    label="" 
                    options={PENTEST_STATUS_OPTIONS}
                    value={order.status}
                    onChange={(newStatus) => handleStatusChange(order.id, newStatus as PentestStatus)}
                    className="min-w-[150px]"
                  />
                </td>
                <td className="p-2 text-neutral-light">
                  {editingNotesFor?.orderId === order.id ? (
                    <div className="flex items-center space-x-1">
                      <TextInput
                        id={`notes-${order.id}`}
                        label=""
                        value={editingNotesFor.notes}
                        onChange={(val) => setEditingNotesFor(prev => prev ? {...prev, notes: val} : null)}
                        className="w-full text-xs"
                      />
                      <Button onClick={handleSaveNotes} size="sm" variant="primary" className="px-1 py-0.5">Save</Button>
                    </div>
                  ) : (
                    <div className="flex items-center justify-between">
                      <span className="truncate max-w-[120px]" title={order.adminNotes || 'No notes'}>
                        {order.adminNotes || <span className="italic text-neutral-medium">No notes</span>}
                      </span>
                      <Button onClick={() => handleEditNotes(order)} size="sm" variant="stealth" className="px-1 py-0.5 text-xs ml-1">Edit</Button>
                    </div>
                  )}
                </td>
                <td className="p-2 text-neutral-light">
                  {order.customerFeedback ? (
                    <div title={order.customerFeedback.comment} className="max-w-[150px] truncate">
                      <div className="flex">
                        {[1,2,3,4,5].map(s => <StarIcon key={s} filled={order.customerFeedback!.rating >= s} className="w-3 h-3 text-neonGreen-DEFAULT"/>)}
                      </div>
                      <span className="italic text-neutral-medium text-[0.7rem]">{order.customerFeedback.comment || "No comment"}</span>
                    </div>
                  ) : <span className="italic text-neutral-medium">None</span>}
                </td>
                <td className="p-2 text-center whitespace-nowrap space-x-1">
                  {order.report && (order.status === 'Report Ready' || order.status === 'Completed' || order.status === 'Admin Review') && (
                    <Button onClick={() => onViewReport(order)} variant="outline" size="sm" className="px-1.5 py-0.5 border-neonCyan-DEFAULT text-neonCyan-light hover:text-black hover:bg-neonCyan-DEFAULT">
                      Report
                    </Button>
                  )}
                  {onNotifyCustomer && (
                     <Button 
                        onClick={() => onNotifyCustomer(order.id)} 
                        variant="outline" 
                        size="sm" 
                        className="px-1.5 py-0.5 border-neonMagenta-DEFAULT text-neonMagenta-light hover:text-black hover:bg-neonMagenta-DEFAULT"
                        title="Mark as notified and save current state"
                      >
                      Notify
                    </Button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};
