

import React from 'react';
import { PentestOrder, PentestTargetInfo } from '../types';
import { Button } from './ui/Button';

interface PentestOrdersViewProps {
  orders: PentestOrder[];
  onViewReport: (order: PentestOrder) => void;
  onProvideTargetInfo: (order: PentestOrder) => void;
  onAcknowledgeAdminUpdate?: (orderId: string) => void; // For marking an update as seen by user
}

const StatusIndicator: React.FC<{ status: string }> = ({ status }) => {
  let bgColor = 'bg-neutral-medium';
  let textColor = 'text-neutral-darkest';

  if (status.includes('Ready') || status.includes('Completed')) {
    bgColor = 'bg-neonGreen-DEFAULT';
  } else if (status.includes('Processing') || status.includes('Submitted') || status.includes('Gathering') || status.includes('Scanning')) {
    bgColor = 'bg-neonCyan-DEFAULT';
  } else if (status.includes('Awaiting') || status.includes('Pending') || status.includes('Review')) {
    bgColor = 'bg-neonMagenta-DEFAULT';
  }

  return (
    <span className={`px-2 py-0.5 rounded-full text-xs font-semibold ${bgColor} ${textColor} whitespace-nowrap`}>
      {status}
    </span>
  );
};

const RecentlyUpdatedBadge: React.FC<{ 
    adminUpdateTimestamp?: string;
    notificationTimestamp?: string;
    customerNotified?: boolean;
}> = ({ adminUpdateTimestamp, notificationTimestamp, customerNotified }) => {
    
    if (!adminUpdateTimestamp) return null;

    const updateDate = new Date(adminUpdateTimestamp);
    const now = new Date();
    const hoursSinceUpdate = (now.getTime() - updateDate.getTime()) / (1000 * 60 * 60);
    const isRecent = hoursSinceUpdate <= 72; // Consider updates within last 72 hours as recent for general badge

    // Logic for "Pending Review"
    // Show if admin updated, AND (customer was never notified OR admin update is newer than last notification)
    const adminUpdatedMoreRecently = notificationTimestamp ? updateDate > new Date(notificationTimestamp) : true;
    const needsReview = customerNotified === false || (customerNotified === true && adminUpdatedMoreRecently);


    if (isRecent && needsReview) {
        return (
            <span 
                className="ml-2 px-1.5 py-0.5 bg-neonMagenta-DEFAULT text-black text-[0.65rem] rounded-sm font-mono animate-pulse"
                title={`Admin updated this order on: ${updateDate.toLocaleString()}. Awaiting your review.`}
            >
                ADMIN UPDATE - REVIEW NEEDED!
            </span>
        );
    } else if (isRecent) {
         return (
            <span 
                className="ml-2 px-1.5 py-0.5 bg-neonMagenta-dark text-neonMagenta-light text-[0.65rem] rounded-sm font-mono"
                title={`Admin updated: ${updateDate.toLocaleString()}`}
            >
                RECENTLY UPDATED
            </span>
        );
    }
    return null;
};


export const PentestOrdersView: React.FC<PentestOrdersViewProps> = ({ orders, onViewReport, onProvideTargetInfo, onAcknowledgeAdminUpdate }) => {
  if (orders.length === 0) {
    return (
      <div className="text-center p-10">
        <h1 className="text-3xl font-bold text-neonGreen-DEFAULT mb-4">
            <span className="typing-text animate-typing">NO CYBER SERVICE ORDERS FOUND</span><span className="typing-caret"></span>
        </h1>
        <p className="text-neutral-light">You have not acquired any KI-driven Cyber Security Services yet.</p>
      </div>
    );
  }
  
  const handleViewReportClick = (order: PentestOrder) => {
    if (onAcknowledgeAdminUpdate) {
        onAcknowledgeAdminUpdate(order.id);
    }
    onViewReport(order);
  };

  const handleProvideTargetInfoClick = (order: PentestOrder) => {
    if (onAcknowledgeAdminUpdate) {
        onAcknowledgeAdminUpdate(order.id);
    }
    onProvideTargetInfo(order);
  };


  return (
    <div className="max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold text-neonGreen-DEFAULT my-6 text-center">
        <span className="typing-text animate-typing">MY CYBER SERVICE ORDERS</span><span className="typing-caret"></span>
      </h1>
      
      <div className="space-y-4">
        {orders.sort((a,b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime()).map(order => (
          <div key={order.id} className="p-4 bg-neutral-dark border border-neutral-medium rounded-md shadow-md relative scanline-container overflow-hidden">
            <div className="scanline-overlay opacity-10"></div>
            <div className="relative z-10">
                <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-2">
                <div>
                    <h2 className="text-lg font-semibold text-neonGreen-light">{order.productName}
                    {order.productId === 'prod_svc_003' && <span className="ml-2 text-xs bg-neonMagenta-dark text-neonMagenta-light px-1.5 py-0.5 rounded-sm font-mono align-middle">[CHIMERA PROTOCOL]</span>}
                    </h2>
                    <p className="text-xs text-neutral-light">Order ID: {order.id}</p>
                    <p className="text-xs text-neutral-light">Date: {new Date(order.orderDate).toLocaleDateString()}</p>
                </div>
                <div className="mt-2 sm:mt-0 flex items-center">
                    <StatusIndicator status={order.status} />
                    <RecentlyUpdatedBadge 
                        adminUpdateTimestamp={order.lastAdminUpdateTimestamp}
                        notificationTimestamp={order.lastNotificationTimestamp}
                        customerNotified={order.customerNotifiedOfLastAdminUpdate}
                    />
                </div>
                </div>

                {order.targetInfo && (
                <div className="text-xs text-neonCyan-light my-1 border-t border-b border-neutral-dark py-1">
                    Target: {order.targetInfo.targetUrl || order.targetInfo.targetIp || 'N/A'}
                    {order.targetInfo.scopeNotes && <span className="block text-neutral-medium italic truncate" title={order.targetInfo.scopeNotes}>Scope: {order.targetInfo.scopeNotes}</span>}
                </div>
                )}
                
                <div className="mt-3 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2 justify-end">
                {order.status === 'Awaiting Target Info' && (
                    <Button onClick={() => handleProvideTargetInfoClick(order)} variant="secondary" size="sm">
                    PROVIDE TARGET INFO
                    </Button>
                )}
                {order.report && (order.status === 'Report Ready' || order.status === 'Admin Review' || order.status === 'Completed') && (
                    <Button 
                        onClick={() => handleViewReportClick(order)} 
                        variant={order.status === 'Completed' ? "outline" : "primary"} 
                        size="sm"
                        className={order.status === 'Completed' ? "border-neonGreen-DEFAULT text-neonGreen-DEFAULT hover:bg-neonGreen-DEFAULT hover:text-black" : ""}
                    >
                    VIEW {order.status === 'Completed' ? 'FINAL' : ''} SECURITY REPORT
                    </Button>
                )}
                </div>
                {order.adminNotes && (
                    <p className="text-xs mt-2 pt-1 border-t border-neutral-dark text-neonMagenta-light">
                        <span className="font-semibold">Admin Note:</span> {order.adminNotes}
                    </p>
                )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
